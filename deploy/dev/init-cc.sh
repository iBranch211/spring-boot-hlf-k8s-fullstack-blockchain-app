docker exec -it cli-peer0-org1 /bin/bash -c 'cd /opt/gopath/src/github.com/chaincode/basic/packaging && peer lifecycle chaincode install basic-org1.tgz'
docker exec -it cli-peer0-org1 /bin/bash -c 'PACKAGE_ID=$(echo $(peer lifecycle chaincode queryinstalled)  | sed "s/.*Package ID: //; s/,.*//") && peer lifecycle chaincode approveformyorg --channelID $CHANNEL_NAME --name $CHAINCODE_NAME --version $CHAINCODE_VERSION --init-required --package-id $PACKAGE_ID --sequence 1 -o $ORDERER_URL --tls --cafile $ORDERER_CA'
docker exec -it cli-peer0-org1 /bin/bash -c 'peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name $CHAINCODE_NAME --version $CHAINCODE_VERSION --init-required --sequence 1 -o $ORDERER_URL --tls --cafile $ORDERER_CA'
docker exec -it cli-peer0-org1 /bin/bash -c 'peer lifecycle chaincode commit -o $ORDERER_URL --channelID $CHANNEL_NAME --name $CHAINCODE_NAME --version $CHAINCODE_VERSION --sequence 1 --init-required --tls true --cafile $ORDERER_CA --peerAddresses peer0-org1:7051 --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt && peer lifecycle chaincode querycommitted -C $CHANNEL_NAME'
docker exec -it peer0-org1 /bin/sh -c "cd /var/hyperledger/production/externalbuilder/builds/*/release/chaincode/server && rm connection.json && echo '{\"address\":\"basic-org1:7052\",\"dial_timeout\":\"10s\",\"tls_required\":false,\"client_auth_required\":false,\"client_key\":\"-----BEGIN EC PRIVATE KEY----- ... -----END EC PRIVATE KEY-----\",\"client_cert\":\"-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----\",\"root_cert\":\"-----BEGIN CERTIFICATE---- ... -----END CERTIFICATE-----\"}' >> connection.json"
docker exec -it cli-peer0-org1 /bin/bash -c 'peer chaincode invoke -o $ORDERER_URL --isInit --tls true --cafile $ORDERER_CA -C $CHANNEL_NAME -n $CHAINCODE_NAME --peerAddresses peer0-org1:7051 --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt -c '\''{"Args":["InitLedger"]}'\'' --waitForEvent'